# What happens when you initialize a repository? Why do you need to do it?

Using git init initializes a repository, it creates a .git folder that houses
all of the git data. You need to do it so that git can keep track of the repo and 
differentiates it from a normal folder.

# How is the staging area different from the working directory and the repository? What value do you think it offers?

the staging area is a loading dock of files waiting to be commited. this allows 
you to bundle related files together in the one commit

# How can you use the staging area to make sure you have one commit per logical change?

You can use git diff to show what changes you have made so far. This information
can be used to ensure that this commit is logical and only contains the required
amount for 1 logical change

# What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be useful when adding new features if they drastically change from
the current workings so that changes could still be made on the master in a timely
manner and all development on the main app doesn't have to completely pause.

# How do the diagrams help you visualize the branch structure?

Diagramming branches is useful to show the flow of commits and why some commits 
aren't shown in logs (because they are on a different branch)

# What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

GIt compares the changes made at the point of each branch to the commit that was 
parent to both branches. It finds what was deleted and added and magically merges
the two into one.